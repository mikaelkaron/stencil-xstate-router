/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import 'stencil-xstate';
import {
  EventObject,
  StateMachine,
} from 'xstate';
import {
  Options,
} from 'stencil-xstate/dist/types';
import {
  ComponentRenderer,
  NavigationHandler,
  RouteEventObject,
  RouteHandler,
  StateRenderer,
} from './components/xstate-router/index';


export namespace Components {

  interface XstateRouterNavigo {
    /**
    * Capture clicks from child elements and convert to routes
    */
    'capture'?: boolean;
    /**
    * The hash parameter allows you to configure the hash character
    */
    'hash'?: string;
    /**
    * An XState machine
    */
    'machine': StateMachine<any, any, EventObject>;
    /**
    * The main URL of your application.
    */
    'root'?: string;
    /**
    * If useHash set to true then the router uses an old routing approach with hash in the URL. Fall back to this mode if there is no History API supported.
    */
    'useHash'?: boolean;
  }
  interface XstateRouterNavigoAttributes extends StencilHTMLAttributes {
    /**
    * Capture clicks from child elements and convert to routes
    */
    'capture'?: boolean;
    /**
    * The hash parameter allows you to configure the hash character
    */
    'hash'?: string;
    /**
    * An XState machine
    */
    'machine': StateMachine<any, any, EventObject>;
    /**
    * The main URL of your application.
    */
    'root'?: string;
    /**
    * If useHash set to true then the router uses an old routing approach with hash in the URL. Fall back to this mode if there is no History API supported.
    */
    'useHash'?: boolean;
  }

  interface XstateRouter {
    /**
    * Component renderer
    */
    'componentRenderer': ComponentRenderer<
    any,
    any,
    EventObject
    >;
    /**
    * An XState machine
    */
    'machine': StateMachine<any, any, EventObject>;
    /**
    * Should state.meta be merged
    */
    'merge': boolean;
    /**
    * Callback for url changes
    */
    'navigate': NavigationHandler;
    /**
    * Interpreter options
    */
    'options'?: Options;
    /**
    * Callback for route subscriptions
    */
    'route': RouteHandler<any, any, RouteEventObject>;
    /**
    * State renderer
    */
    'stateRenderer': StateRenderer<any, any, RouteEventObject>;
  }
  interface XstateRouterAttributes extends StencilHTMLAttributes {
    /**
    * Component renderer
    */
    'componentRenderer'?: ComponentRenderer<
    any,
    any,
    EventObject
    >;
    /**
    * An XState machine
    */
    'machine': StateMachine<any, any, EventObject>;
    /**
    * Should state.meta be merged
    */
    'merge'?: boolean;
    /**
    * Callback for url changes
    */
    'navigate': NavigationHandler;
    /**
    * Interpreter options
    */
    'options'?: Options;
    /**
    * Callback for route subscriptions
    */
    'route': RouteHandler<any, any, RouteEventObject>;
    /**
    * State renderer
    */
    'stateRenderer'?: StateRenderer<any, any, RouteEventObject>;
  }
}

declare global {
  interface StencilElementInterfaces {
    'XstateRouterNavigo': Components.XstateRouterNavigo;
    'XstateRouter': Components.XstateRouter;
  }

  interface StencilIntrinsicElements {
    'xstate-router-navigo': Components.XstateRouterNavigoAttributes;
    'xstate-router': Components.XstateRouterAttributes;
  }


  interface HTMLXstateRouterNavigoElement extends Components.XstateRouterNavigo, HTMLStencilElement {}
  var HTMLXstateRouterNavigoElement: {
    prototype: HTMLXstateRouterNavigoElement;
    new (): HTMLXstateRouterNavigoElement;
  };

  interface HTMLXstateRouterElement extends Components.XstateRouter, HTMLStencilElement {}
  var HTMLXstateRouterElement: {
    prototype: HTMLXstateRouterElement;
    new (): HTMLXstateRouterElement;
  };

  interface HTMLElementTagNameMap {
    'xstate-router-navigo': HTMLXstateRouterNavigoElement
    'xstate-router': HTMLXstateRouterElement
  }

  interface ElementTagNameMap {
    'xstate-router-navigo': HTMLXstateRouterNavigoElement;
    'xstate-router': HTMLXstateRouterElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
