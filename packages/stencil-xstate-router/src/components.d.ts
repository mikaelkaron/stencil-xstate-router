/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import 'stencil-xstate';
import {
  Send,
} from './components/xstate-router';
import {
  EventObject,
  Interpreter,
  State,
  StateMachine,
} from 'xstate';
import {
  Options,
} from 'stencil-xstate/dist/types';
import {
  ComponentRenderer,
  MachineState,
  RouteEvent,
  Send as Send2,
} from './components/xstate-router/index';


export namespace Components {

  interface IsAnonymous {
    'current': State<any, any>;
    'send': Send<any, any, any>;
  }
  interface IsAnonymousAttributes extends StencilHTMLAttributes {
    'current': State<any, any>;
    'send': Send<any, any, any>;
  }

  interface IsAuthenticated {
    'current': State<any, any>;
    'send': Send<any, any, any>;
  }
  interface IsAuthenticatedAttributes extends StencilHTMLAttributes {
    'current': State<any, any>;
    'send': Send<any, any, any>;
  }

  interface IsTest {
    'current': State<any, any>;
    'send': Send<any, any, any>;
    'testId': string;
  }
  interface IsTestAttributes extends StencilHTMLAttributes {
    'current': State<any, any>;
    'send': Send<any, any, any>;
    'testId'?: string;
  }

  interface XstateRouterTest {}
  interface XstateRouterTestAttributes extends StencilHTMLAttributes {}

  interface XstateRouter {
    /**
    * Renderer for components
    */
    'componentRenderer': ComponentRenderer<
    any,
    any,
    EventObject
    >;
    /**
    * An XState machine
    */
    'machine': StateMachine<any, any, EventObject>;
    /**
    * Interpreter options
    */
    'options'?: Options;
    /**
    * Callback for route subscriptions
    */
    'route': (
    path: string,
    exact: boolean,
    send: Send<any, any, RouteEvent>
    ) => VoidFunction;
    /**
    * Callback for url changes
    */
    'routed': (url: string) => void;
    /**
    * Renderer for states
    */
    'stateRenderer': (
    component: JSX.Element[] | JSX.Element,
    current: MachineState<any, EventObject>,
    send: Send<any, any, RouteEvent>,
    service: Interpreter<any, any, EventObject>
    ) => JSX.Element[] | JSX.Element;
  }
  interface XstateRouterAttributes extends StencilHTMLAttributes {
    /**
    * Renderer for components
    */
    'componentRenderer'?: ComponentRenderer<
    any,
    any,
    EventObject
    >;
    /**
    * An XState machine
    */
    'machine': StateMachine<any, any, EventObject>;
    /**
    * Interpreter options
    */
    'options'?: Options;
    /**
    * Callback for route subscriptions
    */
    'route': (
    path: string,
    exact: boolean,
    send: Send<any, any, RouteEvent>
    ) => VoidFunction;
    /**
    * Callback for url changes
    */
    'routed': (url: string) => void;
    /**
    * Renderer for states
    */
    'stateRenderer'?: (
    component: JSX.Element[] | JSX.Element,
    current: MachineState<any, EventObject>,
    send: Send<any, any, RouteEvent>,
    service: Interpreter<any, any, EventObject>
    ) => JSX.Element[] | JSX.Element;
  }
}

declare global {
  interface StencilElementInterfaces {
    'IsAnonymous': Components.IsAnonymous;
    'IsAuthenticated': Components.IsAuthenticated;
    'IsTest': Components.IsTest;
    'XstateRouterTest': Components.XstateRouterTest;
    'XstateRouter': Components.XstateRouter;
  }

  interface StencilIntrinsicElements {
    'is-anonymous': Components.IsAnonymousAttributes;
    'is-authenticated': Components.IsAuthenticatedAttributes;
    'is-test': Components.IsTestAttributes;
    'xstate-router-test': Components.XstateRouterTestAttributes;
    'xstate-router': Components.XstateRouterAttributes;
  }


  interface HTMLIsAnonymousElement extends Components.IsAnonymous, HTMLStencilElement {}
  var HTMLIsAnonymousElement: {
    prototype: HTMLIsAnonymousElement;
    new (): HTMLIsAnonymousElement;
  };

  interface HTMLIsAuthenticatedElement extends Components.IsAuthenticated, HTMLStencilElement {}
  var HTMLIsAuthenticatedElement: {
    prototype: HTMLIsAuthenticatedElement;
    new (): HTMLIsAuthenticatedElement;
  };

  interface HTMLIsTestElement extends Components.IsTest, HTMLStencilElement {}
  var HTMLIsTestElement: {
    prototype: HTMLIsTestElement;
    new (): HTMLIsTestElement;
  };

  interface HTMLXstateRouterTestElement extends Components.XstateRouterTest, HTMLStencilElement {}
  var HTMLXstateRouterTestElement: {
    prototype: HTMLXstateRouterTestElement;
    new (): HTMLXstateRouterTestElement;
  };

  interface HTMLXstateRouterElement extends Components.XstateRouter, HTMLStencilElement {}
  var HTMLXstateRouterElement: {
    prototype: HTMLXstateRouterElement;
    new (): HTMLXstateRouterElement;
  };

  interface HTMLElementTagNameMap {
    'is-anonymous': HTMLIsAnonymousElement
    'is-authenticated': HTMLIsAuthenticatedElement
    'is-test': HTMLIsTestElement
    'xstate-router-test': HTMLXstateRouterTestElement
    'xstate-router': HTMLXstateRouterElement
  }

  interface ElementTagNameMap {
    'is-anonymous': HTMLIsAnonymousElement;
    'is-authenticated': HTMLIsAuthenticatedElement;
    'is-test': HTMLIsTestElement;
    'xstate-router-test': HTMLXstateRouterTestElement;
    'xstate-router': HTMLXstateRouterElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
